1. Create a PHP program using switch to print a grade for marks input (A, B, C, Fail).
Ans:
<?php
// 1. Grade using switch
$marks = readline("Enter your marks: ");
switch (true) {
    case ($marks >= 75):
        echo "Grade: A<br>";
        break;
    case ($marks >= 60):
        echo "Grade: B<br>";
        break;
    case ($marks >= 40):
        echo "Grade: C<br>";
        break;
    default:
        echo "Grade: Fail<br>";
}

2. Use while loop to sum the first 10 even numbers.
Ans:
<?php
$sum = 0;
$num = 2;
$count = 0;
while ($count < 10) {
    $sum += $num;
    $num += 2;
    $count++;
}
echo "Sum of first 10 even numbers: $sum<br>";
?>

3. Write PHP Script to display sum of digit of entered number
Ans:
<?php
// 3. Sum of digits of a number
$number = readline("Enter a number: ");
$sum = 0;
$temp = $number;
while ($temp != 0) {
    $sum += $temp % 10;
    $temp = $temp / 10;
// }
echo "Sum of digits of $number is: $sum<br>";

4. Write a PHP program to display multiplication table of number 'n'
Ans:
<?php
$n = readline("Enter a number for multiplication table: ");
echo "Multiplication table of $n:\n";
for ($i = 1; $i <= 10; $i++) {
    echo "$n x $i = " . ($n * $i) . "\n";
}
?>

5. Write a PHP program to display multiplication table of 1 to 5
Ans:
<?php
// 5. Multiplication tables of 1 to 5
for ($n = 1; $n <= 5; $n++) {
    echo "\nMultiplication Table of $n:\n";
    for ($i = 1; $i <= 10; $i++) {
        echo "$n x $i = " . ($n * $i) . "\n";
    }
}
?>

6. Write a foreach loop to print values of an indexed and associative array.
Ans:
<?php
// 6. Foreach loop with indexed and associative array
$indexed = [10, 20, 30];
$associative = ["name" => "John", "age" => 25];
echo "<br>Indexed Array:<br>";
foreach ($indexed as $value) {
    echo "$value<br>";
}
echo "Associative Array:<br>";
foreach ($associative as $key => $value) {
    echo "$key : $value<br>";
}
?>

7. Create an associative array for student names and grades, display them using a loop.
Ans:
<?php
// 7. Associative array for student names and grades
$students = [
    "Alice" => "A",
    "Bob" => "B",
    "Charlie" => "C"
];
echo "<br>Student Grades:<br>";
foreach ($students as $name => $grade) {
    echo "$name : $grade<br>";
}
?>

8. Write a program using multidimensional arrays to store student records (Name, Roll No, Marks) and print them
Ans:
<?php
// 8. Multidimensional array for student records
$studentRecords = [
    ["Name" => "Ravi", "Roll No" => 101, "Marks" => 85],
    ["Name" => "Neha", "Roll No" => 102, "Marks" => 90],
    ["Name" => "Amit", "Roll No" => 103, "Marks" => 78]
];
echo "<br>Student Records:<br>";
foreach ($studentRecords as $record) {
    echo "Name: {$record['Name']}, Roll No: {$record['Roll No']}, Marks: {$record['Marks']}<br>";
}
?>

9. Write a program using multidimensional arrays to store user records (Name, email id, mobile no and address) and print them.
Ans:
<?php

// 9. Multidimensional array for user records
$userRecords = [
    ["Name" => "John", "Email" => "john@example.com", "Mobile" => "1234567890", "Address" => "Delhi"],
    ["Name" => "Sara", "Email" => "sara@example.com", "Mobile" => "9876543210", "Address" => "Mumbai"]
];
echo "<br>User Records:<br>";
foreach ($userRecords as $user) {
    echo "Name: {$user['Name']}, Email: {$user['Email']}, Mobile: {$user['Mobile']}, Address: {$user['Address']}<br>";
}
?>

10. Write a PHP program to calculate the length of a string and to count words without using str_word_count().
Ans:
<?php
$str = readline("Enter a string: ");
$c = 0;
for ($i = 0; $i < strlen($str); $i++) {
    $c++;
}
echo "Length of the string is: $c<br>";
$count = 0;
$words = explode(" ", $str);
foreach ($words as $word) {
    if (!empty($word)) {
        $count++;
    }
}
echo "Word count: " . $count . "<br>";
?>
11. Write a parameterized function to calculate the sum of two numbers
Ans:
<?php
function sum($a, $b) {
    return $a + $b;
}
echo "Sum of 10 and 20 is: " . sum(10, 20) . "<br>";
?>

12. Implement an anonymous function to print a string.
Ans:
<?php

$printString = function() {
    echo "Anonymous Function Output";
};
$printString();
?>

13.  Implement single inheritance in PHP (parent class: student and child class: Test1) and Display details of student with test result
Ans:
<?php
class Student {
    public $name, $roll;

    public function setDetails($name, $roll) {
        $this->name = $name;
        $this->roll = $roll;
    }

    public function getDetails() {
        echo "Student Name: $this->name<br>Roll No: $this->roll<br>";
    }
}

class Test1 extends Student {
    public $marks;

    public function setMarks($marks) {
        $this->marks = $marks;
    }

    public function getMarks() {
        echo "Test1 Marks: $this->marks<br>";
    }
}

echo "<br><b>Single Inheritance Example:</b><br>";
$test1 = new Test1();
$test1->setDetails("Aarav", 101);
$test1->setMarks(85);
$test1->getDetails();
$test1->getMarks();
?>

14. Implement multilevel inheritance in PHP (parent class: student ? child class: Tests?result) and Display result of student for two class test percentage and average of test1 and test2 subject wise.
Ans:
<?php

// 14. Multilevel Inheritance in PHP
class Student1 {
    public $name, $roll;

    public function setStudent($name, $roll) {
        $this->name = $name;
        $this->roll = $roll;
    }

    public function getStudent() {
        echo "Student Name: $this->name<br>Roll No: $this->roll<br>";
    }
}

class Tests extends Student1 {
    public $test1 = [], $test2 = [];

    public function setTests($test1, $test2) {
        $this->test1 = $test1;
        $this->test2 = $test2;
    }

    public function getTests() {
        echo "Test 1 Marks: " . implode(", ", $this->test1) . "<br>";
        echo "Test 2 Marks: " . implode(", ", $this->test2) . "<br>";
    }
}

class Result extends Tests {
    public function showResult() {
        $subjects = count($this->test1);
        echo "Subject-wise Results:<br>";
        for ($i = 0; $i < $subjects; $i++) {
            $total = $this->test1[$i] + $this->test2[$i];
            $average = $total / 2;
            $percentage = ($total / 200) * 100;
            echo "Subject " . ($i + 1) . ": Avg = $average, % = $percentage%<br>";
        }
    }
}

echo "<br><b>Multilevel Inheritance Example:</b><br>";
$res = new Result();
$res->setStudent("Ishita", 202);
$res->setTests([80, 90], [85, 88]);
$res->getStudent();
$res->getTests();
$res->showResult();
?>

15. Write a PHP script to demonstrate any five-class introspection using
Ans:
<?php
// Sample class
class Student {
    public $name;
    public $age;

    public function __construct($name = "John", $age = 20) {
        $this->name = $name;
        $this->age = $age;
    }

    public function greet() {
        return "Hello, I'm $this->name";
    }
}

// Create an object
$student = new Student("Alice", 22);

// 1. Get class name
echo "Class Name: " . get_class($student) . "<br>";

// 2. Get class methods
echo "Class Methods:<br>";
print_r(get_class_methods($student));
echo "<br><br>";

// 3. Get class variables (properties)
echo "Class Variables:<br>";
print_r(get_class_vars(get_class($student)));
echo "<br><br>";

// 4. Get object variables (current object values)
echo "Object Variables:<br>";
print_r(get_object_vars($student));
echo "<br><br>";

// 5. Check if method exists
$methodName = "greet";
if (method_exists($student, $methodName)) {
    echo "Method '$methodName' exists in class " . get_class($student) . "<br>";
    echo "Calling method: " . $student->$methodName() . "<br>";
} else {
    echo "Method '$methodName' does not exist.<br>";
}
?>

16. Create a class product with data members id, name and price. Consider that customer bought multiple products. Then Calculate the total price of products purchased. Use constructor
Ans:
<?php
class Product {
    public $id, $name, $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function display() {
        echo "Product: $this->name, Price: ?$this->price<br>";
    }
}

// Create 3 product objects
$product1 = new Product(1, "Keyboard", 1000);
$product2 = new Product(2, "Mouse", 500);
$product3 = new Product(3, "Monitor", 7000);

// Display each product
$product1->display();
$product2->display();
$product3->display();

// Calculate total
$total = $product1->price + $product2->price + $product3->price;
echo "Total Price: ?$total<br>";
?>

17. Write a program to serialize and unserialize an array/object
Ans:
<?php
// Serialize and Unserialize Array
$user = ["name" => "Amit", "email" => "amit@example.com"];
$serializedArray = serialize($user);
echo "Serialized Array: $serializedArray<br>";

$unserializedArray = unserialize($serializedArray);
echo "Unserialized Array:<br>";
print_r($unserializedArray);

// Serialize and Unserialize Object
class Demo {
    public $x = 10;
}
$obj = new Demo();
$serializedObject = serialize($obj);
echo "<br><br>Serialized Object: $serializedObject<br>";

$unserializedObject = unserialize($serializedObject);
echo "Unserialized Object Value: " . $unserializedObject->x . "<br>";
?>

18. Design a form for user registration and validate fields like email, password, and phone using PHP.
Ans:
<!-- save as registration_validate.php -->
<form method="post" action="">
    Email: <input type="text" name="email"><br>
    Password: <input type="password" name="password"><br>
    Phone: <input type="text" name="phone"><br>
    <input type="submit" name="submit" value="Register">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $password = $_POST["password"];
    $phone = $_POST["phone"];
    $errors = [];

    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors[] = "Invalid email format.";
    }
    if (strlen($password) < 6) {
        $errors[] = "Password must be at least 6 characters.";
    }
    if (!preg_match("/^[0-9]{10}$/", $phone)) {
        $errors[] = "Phone number must be 10 digits.";
    }

    if (empty($errors)) {
        echo "Registration Successful!<br>";
    } else {
        foreach ($errors as $error) {
            echo "<span style='color:red;'>$error</span><br>";
        }
    }
}
?>

19. Design a form for user registration and retrieve information on successful submission using PHP.
Ans:
<!-- save as registration_retrieve.php -->
<form method="post" action="">
    Name: <input type="text" name="name"><br>
    Email: <input type="text" name="email"><br>
    Age: <input type="number" name="age"><br>
    <input type="submit" name="submit" value="Submit">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    echo "<h3>User Registration Data:</h3>";
    echo "Name: " . htmlspecialchars($_POST["name"]) . "<br>";
    echo "Email: " . htmlspecialchars($_POST["email"]) . "<br>";
    echo "Age: " . htmlspecialchars($_POST["age"]) . "<br>";
}
?>

20. Develop a PHP application to enter student data into a MySQL database. Retrieve and display data from the database in tabular form. Update a record in the database. Delete a specific record from the database
Ans:
<?php
// Connect to MySQL
$conn = new mysqli("localhost", "root", "", "studentdb");
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Add new student
if (isset($_POST['add'])) {
    $name = $_POST['name'];
    $email = $_POST['email'];
    $course = $_POST['course'];
    $conn->query("INSERT INTO students (name, email, course) VALUES ('$name', '$email', '$course')");
}

// Delete student
if (isset($_GET['delete'])) {
    $id = $_GET['delete'];
    $conn->query("DELETE FROM students WHERE id=$id");
}

// Get student data for editing
$edit = null;
if (isset($_GET['edit'])) {
    $id = $_GET['edit'];
    $result = $conn->query("SELECT * FROM students WHERE id=$id");
    $edit = $result->fetch_assoc();
}

// Update student
if (isset($_POST['update'])) {
    $id = $_POST['id'];
    $name = $_POST['name'];
    $email = $_POST['email'];
    $course = $_POST['course'];
    $conn->query("UPDATE students SET name='$name', email='$email', course='$course' WHERE id=$id");
}
?>

<!-- HTML Form -->
<h2><?php echo $edit ? "Edit Student" : "Add Student"; ?></h2>
<form method="post">
    <input type="hidden" name="id" value="<?php echo $edit['id'] ?? ''; ?>">
    Name: <input type="text" name="name" value="<?php echo $edit['name'] ?? ''; ?>" required><br><br>
    Email: <input type="email" name="email" value="<?php echo $edit['email'] ?? ''; ?>" required><br><br>
    Course: <input type="text" name="course" value="<?php echo $edit['course'] ?? ''; ?>" required><br><br>
    <input type="submit" name="<?php echo $edit ? 'update' : 'add'; ?>" value="<?php echo $edit ? 'Update' : 'Add'; ?>">
</form>

<!-- Display Students -->
<h2>All Students</h2>
<table border="1" cellpadding="5">
    <tr>
        <th>ID</th><th>Name</th><th>Email</th><th>Course</th><th>Action</th>
    </tr>
    <?php
    $result = $conn->query("SELECT * FROM students");
    while ($row = $result->fetch_assoc()) {
        echo "<tr>
            <td>{$row['id']}</td>
            <td>{$row['name']}</td>
            <td>{$row['email']}</td>
            <td>{$row['course']}</td>
            <td>
                <a href='?edit={$row['id']}'>Edit</a> | 
                <a href='?delete={$row['id']}' onclick='return confirm(\"Delete this student?\")'>Delete</a>
            </td>
        </tr>";
    }
    ?>
</table>
